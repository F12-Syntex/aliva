// === CONFIG ===
rootDir = "H:/Novels/Downloader/mangas"
mangaUrl = "https://mangadex.org/title/6079d103-113b-45b4-a76b-8750842b0770/bokura-no-ai-wa-kimochi-warui"

// === SLUG EXTRACTION ===
urlParts = split(mangaUrl, "/")
mangaSlug = get(urlParts, length(urlParts) - 1)
if (contains(mangaSlug, "?")) {
    mangaSlug = split(mangaSlug, "?")[0]
}
safeTitle = mangaSlug

// === PATHS ===
mangaDir = rootDir + "/" + safeTitle
chapterDir = mangaDir + "/chapters"
metaFile = mangaDir + "/metadata.json"

writeFile(mangaDir + "/.init", "")
writeFile(chapterDir + "/.init", "")

// === META INIT ===
map meta = { "title": safeTitle, "url": mangaUrl, "chapters": [] }

// === SCRAPE ONE PAGE ===
println("Launching browser...")
map b = browserLaunch("playwright", true)
startPageNum = 1
browserGoto(b, mangaUrl + "?tab=chapters&page=" + startPageNum)
waitForHydration(b, ".chapter", 30000)

page = browserContent(b)
currentPageUrl = mangaUrl + "?tab=chapters&page=" + startPageNum

chapters = selectAll(page, ".chapter")
if (length(chapters) == 0) {
    println("No chapters found.")
} else {
    println("Found " + length(chapters) + " chapters on page " + startPageNum)

    j = 0
    while (j < length(chapters)) {
        chap = get(chapters, j)
        title = selectText(chap, ".line-clamp-1")
        url   = selectAttr(chap, "a[href*='/chapter/']", "href")
        lang  = selectAttr(chap, "img[title]", "title")
        if (lang == null) { lang = "" }

        if (lang == "English") {
            fullUrl = "https://mangadex.org" + url
            println("Processing chapter: " + title)

            chList = get(meta, "chapters")
            if (chList == null || !isList(chList)) {
                chList = []
                set(meta, "chapters", chList)
            }

            chapMap = {
                "title": title,
                "language": lang,
                "url": fullUrl,
                "page_found": startPageNum,
                "page_url": currentPageUrl,
                "pages": []
            }

            safeChapTitle = replaceAll(title, "[\\\\/:*?\"<>|]", "_")
            chapterFolder = chapterDir + "/temp_" + j + "-" + safeChapTitle + "/images"
            writeFile(chapterFolder + "/.init", "")
            set(chapMap, "folder", chapterFolder)

            // DOWNLOAD IMAGES
            map b2 = browserLaunch("playwright", true)
            browserGoto(b2, fullUrl)
            waitForHydration(b2, "body", 30000)
            sleep(5000)
            browserClose(b2)

            chapParts = split(fullUrl, "/")
            chapterId = get(chapParts, length(chapParts) - 1)

            apiUrl = "https://api.mangadex.org/at-home/server/" + chapterId
            map headers = { "Accept": "application/json" }
            apiJsonText = fetchText(apiUrl, headers)
            map apiJson = jsonToMap(apiJsonText)

            baseUrl = get(apiJson, "baseUrl")
            map chapterInfo = get(apiJson, "chapter")
            hashVal = get(chapterInfo, "hash")
            list dataList = get(chapterInfo, "data")

            println("Downloading " + length(dataList) + " images for chapter: " + title)

            // Create a list to store our download tasks
            downloadTasks = []
            pagesList = []
            
            imgIndex = 0
            while (imgIndex < length(dataList)) {
                filename = get(dataList, imgIndex)
                imgUrl = baseUrl + "/data/" + hashVal + "/" + filename
                filePath = chapterFolder + "/image_" + imgIndex + ".jpg"
                append(pagesList, filePath)
                
                // Create a task for each image download
                // Define a function for the download task
                taskFn = fun() {
                    imgBytes = fetchBytes(imgUrl)
                    writeBytes(filePath, imgBytes)
                    println("Downloaded: " + filename)
                }
                append(downloadTasks, taskFn)
                imgIndex = imgIndex + 1
            }

            // Submit all download tasks to thread pool
            futures = threadBatchSubmit(downloadTasks)
            
            // Wait for all downloads to complete
            threadWaitForAll(futures)
            
            set(chapMap, "pages", pagesList)
            append(chList, chapMap)
            set(meta, "chapters", chList)
            writeFile(metaFile, toJson(meta))

            println("Finished chapter: " + title)
        }

        j = j + 1
    }
}

browserClose(b)

println("Download complete.")

// === RENUMBER CHAPTERS ===
println("Renumbering chapters in reverse order...")
chList = get(meta, "chapters")
totalChapters = length(chList)

// Reverse order processing
i = totalChapters - 1
while (i >= 0) {
    chapMap = get(chList, i)
    chapNum = totalChapters - i  // newest chapter gets highest number
    
    // Update chapter number in metadata
    set(chapMap, "chapter_number", chapNum)
    
    // Rename folder
    oldFolder = get(chapMap, "folder")
    chapNumStr = chapNum + ""
    if (length(chapNumStr) < 2) {
        chapNumStr = "0" + chapNumStr
    }
    safeChapTitle = replaceAll(get(chapMap, "title"), "[\\\\/:*?\"<>|]", "_")
    newFolder = chapterDir + "/" + chapNumStr + "-" + safeChapTitle + "/images"
    
    // Create new folder and move files
    writeFile(newFolder + "/.init", "")
    oldFiles = get(chapMap, "pages")
    newPages = []
    for (oldFile in oldFiles) {
        fileName = split(oldFile, "/")[-1]
        newFile = newFolder + "/" + fileName
        writeBytes(newFile, readBytes(oldFile))
        append(newPages, newFile)
    }
    set(chapMap, "folder", newFolder)
    set(chapMap, "pages", newPages)
    
    i = i - 1
}

// Update metadata file with new chapter numbers
writeFile(metaFile, toJson(meta))
println("Chapter renumbering complete.")

// === CREATE EPUB ===
println("Creating EPUB...")

epubCreate("book")
epubMetadata(book, get(meta, "title"), "Unknown", "en")

for (entry in get(meta, "chapters")) {
    chapTitle = get(entry, "title")
    chapNum = get(entry, "chapter_number")
    pages = get(entry, "pages")
    chapFileName = "chapter_" + chapNum + ".xhtml"

    html = "<html xmlns='http://www.w3.org/1999/xhtml'><head><title>" + chapTitle + "</title></head><body>"
    html = html + "<h1>" + chapTitle + "</h1>"

    imgCount = 0
    for (img in pages) {
        imgName = "ch" + chapNum + "_img" + imgCount + ".jpg"
        imgBytes = readBytes(img)
        epubAddImage(book, imgName, imgBytes)
        html = html + "<div><img src='" + imgName + "' style='max-width:100%; height:auto;'/></div>"
        imgCount = imgCount + 1
    }

    html = html + "</body></html>"
    epubAddChapter(book, "Ch. " + chapNum, html, chapFileName)
}

epubPath = mangaDir + "/" + safeTitle + ".epub"
epubSave(book, epubPath)
println("EPUB saved to: " + epubPath)